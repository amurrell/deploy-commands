#!/usr/bin/env bash

# Copy this folder as "commands" and save in same directory as "current" release symlink.
# Put all these config files directly into the commands folder.

# error as soon as a command fails
set -e

# export all variables
set -a

RELEASING_FROM=$(pwd)

# Put the directory owner user into owner_user to change it from www-data
if [ -f owner_user ]; then
    OWNER_USER=$(<owner_user)
else
    OWNER_USER='www-data'
fi

# Put the directory owner group into owner_group to change it from www-data
if [ -f owner_group ]; then
    OWNER_GROUP=$(<owner_group)
else
    OWNER_GROUP='www-data'
fi

# Put default repo in a relative file apprepo
if [ -f apprepo ]; then
    DEFAULT_REPO=$(<apprepo)
fi

# Put logs folder eg. logs/ in a relative file logsfolder
# Logs folder needs to be within the release (repo) and the value relative to the root of the repo
if [ -f logsfolder ]; then
    LOGSFOLDER_LOCATION=$(<logsfolder)
else
    LOGSFOLDER_LOCATION='logs'
fi

# Put assets folder in a relative file assetsfolder
# Assets folder is where your package.json file is, typically in app/resources - but provide the whole path
# eg. app/resources/myfrontendproject/
if [ -f assetsfolder ]; then
    ASSETSFOLDER_LOCATION=$(<assetsfolder)
else
    ASSETSFOLDER_LOCATION=''
fi

# Figure out the npm command to run
if [ -f npm_command ]; then
    NPM_COMMAND=$(<npm_command)
else
    NPM_COMMAND='npm install && npm run build'
fi

H=$(sed -e 's#.*\-h=\([^[:space:]]*\?\).*#\1#' <<< "$*")
R=$(sed -e 's#.*\-r=\([^[:space:]]*\?\).*#\1#' <<< "$*")
V=$(sed -e 's#.*\-v=\([^[:space:]]*\?\).*#\1#' <<< "$*")
T=$(sed -e 's#.*\-t=\([^[:space:]]*\?\).*#\1#' <<< "$*")
B=$(sed -e 's#.*\-b=\([^[:space:]]*\?\).*#\1#' <<< "$*")

if [ "$H" == "-h" ]; then
    printf "Use -r to specify a repo, eg -r=git@xxx\n"
    printf "Use -v to specify release (eg. tag name)\n"
    printf "Use -t to use release as a tag, eg. -t=true or -t=false\n"
    printf "Use -b to specify a branch to change to, eg. -b=dev or -b=false\n"
    exit 1;
fi

# Check that either -r or default_repo are set
if [ "$R" == "$*" ] && [ "$DEFAULT_REPO" == "" ]; then
    printf "You must specify which repo to use. eg -r=git@github.com:you/yourrepo.git\n"
    exit 1
else
    # Set repo depending on whether using -r or default_repo
    if [ "$R" == "$*" ]; then
        REPO=${DEFAULT_REPO}
    else
        REPO=$R
    fi
fi

# go 1 level up, out of commands and into the main folder where the site is
cd ../
APP_PATH=$(pwd)

# Get into the releases folder.
cd releases
RELEASES_FOLDER=$(pwd)

# PROMPT Release Name
if [ "$V" == "$*" ]; then
    read -p "Release Name - eg 1.0.1: " RELEASE
else
    RELEASE=$V
fi

CMD="git clone $REPO $RELEASE"

# Clone the repo
eval $CMD
# Go into the repo
cd $RELEASE
REPO_ROOT=$(pwd)
RELEASE_PATH=$(pwd)
ASSETS_PATH="$RELEASE_PATH/$ASSETSFOLDER_LOCATION"

# PROMPT If Tag
if [ "$T" == "$*" ]; then
    read -p "Is this release a tag? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        T='true'
        git fetch --tags
        git checkout $RELEASE
    fi
elif [ "$T" == "true" ]; then
    git fetch --tags
    git checkout $RELEASE
fi


# PROMPT If Branch change needed
if [ "$B" == "$*" ]; then
    read -p "Do you need a branch change? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch origin
        read -p "Remote Branch name (assumes origin for remote name) eg. v2: " BRANCH
        git checkout -b "$BRANCH" "origin/$BRANCH"
    fi
elif [ "$B" != "false" ]; then
    git fetch origin

    # Check if git fetch was successful
    if [ $? -eq 0 ]; then
        echo "$B"

        # Get current branch
        current_branch=$(git rev-parse --abbrev-ref HEAD)

        # Check if the current branch is different from $B
        if [ "$current_branch" != "$B" ]; then
            git checkout -b "$B" "origin/$B"
        else
            echo "Already on branch $B. Skipping checkout."
        fi
    else
        echo "Failed to fetch from origin. Aborting."
    fi
fi

# Make symbolic link for uploads directory
if [ -d "$APP_PATH/uploads" ]; then
    # if the release has an uploads folder, delete it first
    if [ -d "$RELEASE_PATH/html/wp-content/uploads" ]; then
        rm -rf "$RELEASE_PATH/html/wp-content/uploads"
    fi
    ln -sfn "$APP_PATH/uploads" "$RELEASE_PATH/html/wp-content/uploads"
fi

## Make Logs Directory
mkdir -p "$RELEASE_PATH/$LOGSFOLDER_LOCATION"

## Build Assets
# If ASSETSFOLDER_LOCATION and NPM_COMMAND are not empty
if [ "$ASSETSFOLDER_LOCATION" != "" ] && [ "$NPM_COMMAND" != "" ]; then
    printf "=== The Assets Path: $ASSETS_PATH\n"
    cd $RELEASING_FROM
    set +a
    bash -c -i "$NPM_COMMAND"
fi

## Change ownership of all the repo
chown $OWNER_USER:$OWNER_GROUP "$RELEASE_PATH" -R

## Change back to the commands directory
cd $RELEASING_FROM
