name: Deploy via AWS SSM

on:
  release:
    types:
      - published

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Check if AWS CLI is installed
      run: |
        if command -v aws &> /dev/null
        then
          echo "AWS CLI is already installed"
          exit 0
        else
          echo "AWS CLI is not installed"
          exit 1
        fi
      id: check-aws-cli

    - name: Install AWS CLI
      if: steps.check-aws-cli.outcome == 'failure'
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
        sudo dpkg -i session-manager-plugin.deb

    # Setup AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.PROD_AWS_REGION }}

    # Send command via AWS SSM
    - name: Execute Command on Instance
      id: ssm
      run: |
        REF_NAME=$(basename ${{ github.event.ref }})

        if [ "${{ github.event_name }}" == "push" ]; then
            COMMAND="./deploy.sh --repo ${{ github.repository }} --branch $REF_NAME"
        elif [ "${{ github.event_name }}" == "release" ]; then
            COMMAND="./deploy.sh --repo ${{ github.repository }} --tag $REF_NAME"
        fi

        # wrap COMMAND so that ubuntu can run it. We are root
        RUN_AS_COMMAND="sudo -u ${{ vars.PROD_INSTANCE_USER}} -i bash -c \"$COMMAND\""
        # escape double quotes
        RUN_AS_COMMAND=${RUN_AS_COMMAND//\"/\\\"}
        echo "Executing command: $RUN_AS_COMMAND"

        command_id=$(aws ssm send-command \
            --document-name 'AWS-RunShellScript' \
            --parameters "{\"commands\": [\"$RUN_AS_COMMAND\"]}" \
            --instance-ids "${{ vars.PROD_INSTANCE_ID }}" \
            --output text \
            --query Command.CommandId)

        # Wait for command to finish - but ignore errors
        set +e
        aws ssm wait command-executed \
            --command-id "${command_id}" \
            --instance-id "${{ vars.PROD_INSTANCE_ID }}"
        # return to normal error handling
        set -e

        while [ $(aws ssm list-commands --command-id $command_id --query "Commands[].Status" --output text) == "InProgress" ]; do
            sleep 5
        done

        # Check exit code
        exit_code=$(aws ssm list-command-invocations \
            --command-id "${command_id}" \
            --instance-id "${{ vars.PROD_INSTANCE_ID }}" \
            --query "CommandInvocations[].StatusDetails" \
            --output text)

        # Get standard output
        echo "üìù AWS Command ID [${command_id}] - Standard Output:"
        aws ssm get-command-invocation \
            --command-id "${command_id}" \
            --instance-id "${{ vars.PROD_INSTANCE_ID }}" \
            --query "StandardOutputContent" \
            --output text \
            --no-cli-pager

        # Get standard error
        echo "üìù AWS Command ID [${command_id}] - Standard Error:"
        # Get error output
        aws ssm get-command-invocation \
            --command-id "${command_id}" \
            --instance-id "${{ vars.PROD_INSTANCE_ID }}" \
            --query "StandardErrorContent" \
            --output text \
            --no-cli-pager

        # Printf the command link to be helpful
        echo "üëÄ AWS Console - Output command link: https://${{ vars.PROD_AWS_REGION}}.console.aws.amazon.com/systems-manager/run-command/${command_id}/${{ vars.PROD_INSTANCE_ID }}"

        # Now report on exit code and exit properly.
        if [ "$exit_code" = "Success" ]; then
            echo "‚úÖ Deploy Succeeded"
        else
            echo "‚ùå Deploy Failed"
            exit 1
        fi
