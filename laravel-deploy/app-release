#!/usr/bin/env bash

# Copy this folder as "commands" and save in same directory as "current" release symlink.
# Put all these config files directly into the commands folder.

RELEASING_FROM=$(pwd)

# Put default repo in a relative file apprepo
if [ -f apprepo ]; then
    DEFAULT_REPO=$(<apprepo)
fi

# Put laravel folder in a relative (to commands) file laravelfolder
# Laravel folder needs to be in the release (repo)
# Useful if the repo contains higher level folders and the laravel app is not at the root
if [ -f laravelfolder ]; then
    LARAVELFOLDER_LOCATION=$(<laravelfolder)
else
    LARAVELFOLDER_LOCATION=''
fi

# Put laravel logs folder in a relative file laravellogsfolder
# Logs folder needs to be within the release (repo)
if [ -f laravellogsfolder ]; then
    LARAVELLOGSFOLDER_LOCATION=$(<laravellogsfolder)
else
    LARAVELLOGSFOLDER_LOCATION='logs'
fi

# Put the .env file you want to copy into the releases into a relative file laravelenvfile
if [ -f laravelenvfile ]; then
    LARAVEL_ENVFILE=$(<laravelenvfile)
else
    LARAVEL_ENVFILE=''
fi

# Put the directory owner user into owner_user to change it from www-data
if [ -f owner_user ]; then
    OWNER_USER=$(<owner_group)
else
    OWNER_USER='www-data'
fi

# Put the directory owner group into owner_group to change it from www-data
if [ -f owner_group ]; then
    OWNER_GROUP=$(<owner_group)
else
    OWNER_GROUP='www-data'
fi

printf "$LARAVELFOLDER_LOCATION"
printf "$LARAVELLOGSFOLDER_LOCATION"

H=$(sed -e 's#.*\-h=\([^[:space:]]*\?\).*#\1#' <<< "$*")
R=$(sed -e 's#.*\-r=\([^[:space:]]*\?\).*#\1#' <<< "$*")
V=$(sed -e 's#.*\-v=\([^[:space:]]*\?\).*#\1#' <<< "$*")
T=$(sed -e 's#.*\-t=\([^[:space:]]*\?\).*#\1#' <<< "$*")
B=$(sed -e 's#.*\-b=\([^[:space:]]*\?\).*#\1#' <<< "$*")

if [ "$H" == "-h" ]; then
    printf "Use -r to specify a repo, eg -r=git@xxx\n"
    printf "Use -v to specify release (eg. tag name)\n"
    printf "Use -t to use release as a tag, eg. -t=true or -t=false\n"
    printf "Use -b to specify a branch to change to, eg. -b=dev or -b=false\n"
    exit 1;
fi

# Check that either -r or default_repo are set
if [ "$R" == "$*" ] && [ "$DEFAULT_REPO" == "" ]; then
    printf "You must specify which repo to use. eg -r=git@github.com:you/yourrepo.git\n"
    exit 1
else
    # Set repo depending on whether using -r or default_repo
    if [ "$R" == "$*" ]; then
        REPO=${DEFAULT_REPO}
    else
        REPO=$R
    fi
fi

# Get one level up, out of commands
cd ../releases

# PROMPT Release Name
if [ "$V" == "$*" ]; then
    read -p "Release Name - eg 1.0.1: " RELEASE
else
    RELEASE=$V
fi

CMD="git clone $REPO $RELEASE"

# Clone the repo
eval $CMD
# Go into the repo
cd $RELEASE
REPO_ROOT=$(pwd)

# PROMPT If Tag
if [ "$T" == "$*" ]; then
    read -p "Is this release a tag? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch --tags
        git checkout $RELEASE
    fi
elif [ "$T" == "true" ]; then
    git fetch --tags
    git checkout $RELEASE
fi


# PROMPT If Branch change needed
if [ "$B" == "$*" ]; then
    read -p "Do you need a branch change? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch origin
        read -p "Remote Branch name (assumes origin for remote name) eg. v2: " BRANCH
        git checkout -b "$BRANCH" "origin/$BRANCH"
    fi
elif [ "$B" != "false" ]; then
    git fetch origin
    echo "$B"
    git checkout -b "$B" "origin/$B"
fi

# Go into the laravel app folder
cd "$LARAVELFOLDER_LOCATION"
CURRENT=$(pwd)

printf "$CURRENT"
cd "$CURRENT"

## Laravel specific setup - copy env
if [ ! "$LARAVEL_ENVFILE" == "" ]; then
    echo "$LARAVEL_ENVFILE" >> ".env"
else
    cp "$CURRENT/.env-example" ".env"
    printf "Warning: You still need to setup the .env file for this release. Example copied for now.\n"
fi

## Laravel specific setup - composer install
composer install

## Laravel specific setup - file permissions
touch "$CURRENT/storage/logs/laravel.log"

# Assumes your user is allowed to sudo w/out password entered
sudo chown -R $OWNER_USER:$OWNER_GROUP "$CURRENT"
sudo find "$CURRENT" -type f -exec chmod 664 {} \;
sudo find "$CURRENT" -type d -exec chmod 775 {} \;
sudo chown -R $OWNER_USER:$OWNER_GROUP "$CURRENT/storage"
sudo chown -R $OWNER_USER:$OWNER_GROUP "$CURRENT/bootstrap"
sudo chmod 777 "$CURRENT/storage" -R
sudo chmod 777 "$CURRENT/bootstrap" -R

## Make Logs Directory
mkdir -p "$REPO_ROOT/$LARAVELLOGSFOLDER_LOCATION"

## Change ownership of the logs folder
# putting owner_group twice here for a www-data:www-data setup 
# despite owner_user being set as something potentially different eg. ubuntu
sudo chown $OWNER_GROUP:$OWNER_GROUP "$REPO_ROOT/$LARAVELLOGSFOLDER_LOCATION"

## Change back to the commands directory
cd $RELEASING_FROM