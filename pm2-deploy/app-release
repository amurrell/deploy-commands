#!/usr/bin/env bash

# error as soon as a command fails
set -e

# export all variables
set -a

RELEASING_FROM=$(pwd)

# Put default repo in a relative file apprepo
if [ -f apprepo ]; then
    DEFAULT_REPO=$(<apprepo)
fi

# Where app folder is in the repo (relative to root of repo)
if [ -f appfolder ]; then
    APPFOLDER=$(<appfolder)
else
    APPFOLDER=''
fi

# Put app logs folder in a relative file applogsfolder
# Logs folder needs to be within the release (repo)
if [ -f applogsfolder ]; then
    APPLOGSFOLDER_LOCATION=$(<applogsfolder)
else
    APPLOGSFOLDER_LOCATION='logs'
fi

# Put the .env file you want to copy into the releases into a relative file appenvfile
if [ -f appenvfile ]; then
    APP_ENVFILE=$(<appenvfile)
else
    APP_ENVFILE=''
fi

# Put the directory owner user into owner_user to change it from www-data
if [ -f owner_user ]; then
    OWNER_USER=$(<owner_user)
else
    OWNER_USER='www-data'
fi

# Put the directory owner group into owner_group to change it from www-data
if [ -f owner_group ]; then
    OWNER_GROUP=$(<owner_group)
else
    OWNER_GROUP='www-data'
fi

# Figure out the npm command to run
if [ -f npm_command ]; then
    NPM_COMMAND=$(<npm_command)
else
    NPM_COMMAND='npm install && npm run build'
fi

H=$(sed -e 's#.*\-h=\([^[:space:]]*\?\).*#\1#' <<< "$*")
R=$(sed -e 's#.*\-r=\([^[:space:]]*\?\).*#\1#' <<< "$*")
V=$(sed -e 's#.*\-v=\([^[:space:]]*\?\).*#\1#' <<< "$*")
T=$(sed -e 's#.*\-t=\([^[:space:]]*\?\).*#\1#' <<< "$*")
B=$(sed -e 's#.*\-b=\([^[:space:]]*\?\).*#\1#' <<< "$*")

if [ "$H" == "-h" ]; then
    printf "Use -r to specify a repo, eg -r=git@xxx\n"
    printf "Use -v to specify release (eg. tag name)\n"
    printf "Use -t to use release as a tag, eg. -t=true or -t=false\n"
    printf "Use -b to specify a branch to change to, eg. -b=dev or -b=false\n"
    exit 1;
fi

# Check that either -r or default_repo are set
if [ "$R" == "$*" ] && [ "$DEFAULT_REPO" == "" ]; then
    printf "You must specify which repo to use. eg -r=git@github.com:you/yourrepo.git\n"
    exit 1
else
    # Set repo depending on whether using -r or default_repo
    if [ "$R" == "$*" ]; then
        REPO=${DEFAULT_REPO}
    else
        REPO=$R
    fi
fi

# Get one level up, out of commands, and into releases folder
cd ../releases

# PROMPT Release Name
if [ "$V" == "$*" ]; then
    read -p "Release Name - eg 1.0.1: " RELEASE
else
    RELEASE=$V
fi

CMD="git clone $REPO $RELEASE"

# Clone the repo
eval $CMD
# Go into the repo
cd $RELEASE

# PROMPT If Tag
if [ "$T" == "$*" ]; then
    read -p "Is this release a tag? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch --tags
        git checkout $RELEASE
    fi
elif [ "$T" == "true" ]; then
    git fetch --tags
    git checkout $RELEASE
fi


# PROMPT If Branch change needed
if [ "$B" == "$*" ]; then
    read -p "Do you need a branch change? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch origin
        read -p "Remote Branch name (assumes origin for remote name) eg. v2: " BRANCH
        git checkout -b "$BRANCH" "origin/$BRANCH"
    fi
elif [ "$B" != "false" ]; then
    git fetch origin

    # Check if git fetch was successful
    if [ $? -eq 0 ]; then
        echo "$B"

        # Get current branch
        current_branch=$(git rev-parse --abbrev-ref HEAD)

        # Check if the current branch is different from $B
        if [ "$current_branch" != "$B" ]; then
            git checkout -b "$B" "origin/$B"
        else
            echo "Already on branch $B. Skipping checkout."
        fi
    else
        echo "Failed to fetch from origin. Aborting."
    fi
fi

REPO_ROOT=$(pwd)

# Add logs folder
sudo mkdir -m 775 -p "$REPO_ROOT/$APPLOGSFOLDER_LOCATION"

## Change ownership of the logs folder
# If the logs location has a /, loop through and chown each one
# Prevents issues with paths like Parent/Logs, `chown` will not change the permissions of Parent
if [[ $APPLOGSFOLDER_LOCATION == *\/* ]]; then
    IFS='/' read -ra ADDR <<< "$APPLOGSFOLDER_LOCATION"
    for i in "${ADDR[@]}"; do
        # join the path, but there should be no leading slash if it's the first one
        CUR_LOG_PATH="${CUR_LOG_PATH:+$CUR_LOG_PATH/}$i"
        sudo chown $OWNER_USER:$OWNER_GROUP "$REPO_ROOT/$CUR_LOG_PATH"
        sudo chmod 775 "$REPO_ROOT/$CUR_LOG_PATH"
    done
else
    sudo chown $OWNER_USER:$OWNER_GROUP "$REPO_ROOT/$APPLOGSFOLDER_LOCATION"
fi

# Go into the repo's appfolder, where npm is?
cd $REPO_ROOT/$APPFOLDER
CURRENT=$(pwd)

# add a dot env file if we have one
if [ ! "$APP_ENVFILE" == "" ]; then
    echo "$APP_ENVFILE" >> "$CURRENT/.env"
else
    printf "Warning: You still need to setup the .env file for this release.\n"
fi

set +a

# npm things - (needs interactive (-i) bc nvm npm etc are bash profile based)
bash -c -i "$NPM_COMMAND"

# go back to root of repo
cd ../
# go back to root of releases
cd ../

# Go back to root of your whole project, and into commands
cd ../commands
