#!/usr/bin/env bash

set -a

RELEASING_FROM=$(pwd)

# Put default repo in a relative file apprepo
if [ -f apprepo ]; then
    DEFAULT_REPO=$(<apprepo)
fi

# Put the .env file you want to copy into the releases into a relative file appenvfile
if [ -f appenvfile ]; then
    APP_ENVFILE=$(<appenvfile)
else
    APP_ENVFILE=''
fi

# Figure out the npm command to run
if [ -f npm_command ]; then
    NPM_COMMAND=$(<npm_command)
else
    NPM_COMMAND='npm install && npm run build'
fi

H=$(sed -e 's#.*\-h=\([^[:space:]]*\?\).*#\1#' <<< "$*")
R=$(sed -e 's#.*\-r=\([^[:space:]]*\?\).*#\1#' <<< "$*")
V=$(sed -e 's#.*\-v=\([^[:space:]]*\?\).*#\1#' <<< "$*")
T=$(sed -e 's#.*\-t=\([^[:space:]]*\?\).*#\1#' <<< "$*")
B=$(sed -e 's#.*\-b=\([^[:space:]]*\?\).*#\1#' <<< "$*")

if [ "$H" == "-h" ]; then
    printf "Use -r to specify a repo, eg -r=git@xxx\n"
    printf "Use -v to specify release (eg. tag name)\n"
    printf "Use -t to use release as a tag, eg. -t=true or -t=false\n"
    printf "Use -b to specify a branch to change to, eg. -b=dev or -b=false\n"
    exit 1;
fi

# Check that either -r or default_repo are set
if [ "$R" == "$*" ] && [ "$DEFAULT_REPO" == "" ]; then
    printf "You must specify which repo to use. eg -r=git@github.com:you/yourrepo.git\n"
    exit 1
else
    # Set repo depending on whether using -r or default_repo
    if [ "$R" == "$*" ]; then
        REPO=${DEFAULT_REPO}
    else
        REPO=$R
    fi
fi

# Get one leve up, out of commands
cd ../

# PROMPT Release Name
if [ "$V" == "$*" ]; then
    read -p "Release Name - eg 1.0.1: " RELEASE
else
    RELEASE=$V
fi

CMD="git clone $REPO $RELEASE"

# Clone the repo
eval $CMD
# Go into the repo
cd $RELEASE

# PROMPT If Tag
if [ "$T" == "$*" ]; then
    read -p "Is this release a tag? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch --tags
        git checkout $RELEASE
    fi
elif [ "$T" == "true" ]; then
    git fetch --tags
    git checkout $RELEASE
fi


# PROMPT If Branch change needed
if [ "$B" == "$*" ]; then
    read -p "Do you need a branch change? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git fetch origin
        read -p "Remote Branch name (assumes origin for remote name) eg. v2: " BRANCH
        git checkout -b "$BRANCH" "origin/$BRANCH"
    fi
elif [ "$B" != "false" ]; then
    git fetch origin
    echo "$B"
    git checkout -b "$B" "origin/$B"
fi

# Go into the repo's app folder, where npm is?
cd app
CURRENT=$(pwd)

# add a dot env file if we have one
if [ ! "$APP_ENVFILE" == "" ]; then
    echo "$APP_ENVFILE" >> "$CURRENT/.env"
else
    printf "Warning: You still need to setup the .env file for this release.\n"
fi

set +a

# npm things - (needs interactive (-i) bc nvm npm etc are bash profile based)
bash -c -i "$NPM_COMMAND"

# go back to root of repo
cd ../
# go back to root of releases
cd ../

# Go back into commands
cd commands